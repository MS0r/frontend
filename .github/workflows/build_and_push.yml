name: Frontend CI

on:
  push:
    branches: ["main"]

permissions:
  contents: read

jobs:
  Tests:
    name: Run Tests
    runs-on: ubuntu-latest
    container: node:24-slim

    services:
      db:
        image: postgres
        ports: 5432:5432
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: 123
          POSTGRES_DB: mydb
        options: >-
          --health-cmd "pg_isready -U user -d mydb"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5
      api-server:
        image: mickael279/api-gateway-erlang:latest
        ports: 8000:8000
        env:
          APP_ENV: prod
          DATABASE_URL: postgresql+asyncpg://user:123@db/mydb
          SECRET_KEY: secret
        options: >-
          --health-cmd "curl --fail http://localhost:8000/health || exit 1"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5
      sandbox:
        image: mickael279/sandbox-erlang:latest
        ports:
          - "4000:4000"
        options: >-
          --health-cmd "nc -z localhost 4000 || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      
      - name: Install dependencies
        run: npm install
      
      - name: Run tests
        run: npm test -- --bail 1
        env:
          VITE_API_URL: http://api-server:8000/api
          NODE_ENV: test

  build_and_push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: Tests
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: |
            ${{ vars.DOCKERHUB_USERNAME }}/front-erlang:latest
            ${{ vars.DOCKERHUB_USERNAME }}/front-erlang:${{ github.sha }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
          file: Dockerfile.prod
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VITE_API_URL=${{ vars.VITE_API_URL }}





